from utils import *
from functools import cmp_to_key
import random

scanners = []

def manhattan12space(p, q):
    return abs(p[0]*12 - q[0]) + abs(p[1]*12 - q[1]) + abs(p[2]*12 - q[2])

#@cache
def fingerprints(num):
    global scanners
    scanner = scanners[num]
    fps = set()
    points = []
    for c in itertools.combinations(scanner, 12):
        centroid = [e for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), c)]
        dists = sorted([manhattan12space(p,centroid) for p in c])
        fps.add(tuple(dists))
        points.append((tuple(dists), c))
    return fps, points

def shuffle(list):
    random.shuffle(list)
    return list

sinter = [[(0, 9), ((-884, -676, -820), (-862, -696, 357), (-719, -647, -908), (-462, 334, 246), (-510, 326, 423), (-379, 320, 417), (-907, 638, -667), (-835, -868, 319), (-859, -847, 296), (-787, -613, -713), (-881, 730, -610), (-951, 701, -557)), ((-266, -746, 427), (693, -421, -520), (-339, -373, -775), (800, -324, -583), (-443, -698, 419), (-437, -829, 413), (590, -327, 823), (888, -489, -554), (-316, -349, -754), (-377, -346, -603), (647, -301, 731), (537, -257, 794))], [(0, 10), ((-862, -696, 357), (660, 426, 716), (-462, 334, 246), (679, 383, 790), (708, -533, 665), (-510, 326, 423), (760, -612, 639), (-379, 320, 417), (574, -633, 645), (-835, -868, 319), (-859, -847, 296), (743, 441, 816)), ((543, 570, -723), (791, -283, 364), (785, -289, 495), (563, 670, -589), (962, -297, 447), (418, -346, -694), (912, 884, 844), (889, 905, 820), (492, -389, -675), (851, 733, 847), (569, 649, -775), (392, -404, -758))], [(0, 29), ((654, -533, -962), (-884, -676, -820), (-862, -696, 357), (-719, -647, -908), (458, -554, -972), (708, -533, 665), (760, -612, 639), (574, -633, 645), (-835, -868, 319), (-859, -847, 296), (604, -563, -949), (-787, -613, -713)), ((765, -753, -660), (-613, 742, -580), (-862, -699, -660), (-720, 839, -517), (-849, -649, -630), (396, 814, -346), (-808, 674, -546), (457, 817, -497), (745, -619, -560), (-872, -503, -639), (739, -805, -581), (419, 790, -325))], [(1, 2), ((722, 723, -724), (528, 657, 565), (-721, 336, -454), (520, 666, 702), (775, 729, -648), (-776, 299, -413), (730, 715, -706), (-499, 451, 839), (-603, 276, -422), (-441, 271, 797), (-474, 308, 779), (415, 669, 717)), ((-492, -553, -506), (639, -934, 481), (-739, -481, 707), (-484, -544, -643), (-694, -495, 765), (535, -759, -780), (757, -874, 513), (477, -939, -738), (812, -911, 472), (510, -902, -720), (-686, -487, 783), (-379, -541, -658))], [(1, 11), ((698, -868, 787), (722, 723, -724), (528, 657, 565), (740, -909, 600), (494, -647, -833), (520, 666, 702), (775, 729, -648), (694, -854, 689), (730, 715, -706), (373, -689, -830), (299, -658, -772), (415, 669, 717)), ((838, -795, -522), (772, 494, -716), (844, -719, -469), (781, 631, -724), (830, -777, -514), (784, 646, -829), (-532, -904, -750), (-753, 716, -546), (-574, -901, -871), (-794, 529, -504), (-739, 618, -550), (-543, -843, -945))], [(1, 28), ((698, -868, 787), (528, 657, 565), (740, -909, 600), (520, 666, 702), (694, -854, 689), (-499, 451, 839), (-881, -590, 374), (-441, 271, 797), (-929, -556, 480), (-802, -496, 491), (-474, 308, 779), (415, 669, 717)), ((-782, -922, -521), (-560, 527, 701), (-475, 705, -833), (-483, -467, 343), (-545, 422, 704), (-573, 701, -819), (-662, 747, -874), (-888, -874, -555), (-465, -434, 306), (-423, -492, 486), (-771, -795, -461), (-697, 535, 692))], [(1, 33), ((-721, 336, -454), (-483, -853, -350), (-490, -939, -403), (-776, 299, -413), (-494, -921, -243), (-499, 451, 839), (-881, -590, 374), (-603, 276, -422), (-441, 271, 797), (-929, -556, 480), (-802, -496, 491), (-474, 308, 779)), ((-325, -469, -410), (-755, 538, -769), (-813, 358, -727), (-373, -503, -304), (-764, -852, 473), (-780, 395, -709), (-478, 386, 483), (-760, -834, 313), (-771, -766, 420), (-533, 423, 524), (-651, 363, 492), (-452, -409, -421))], [(2, 22), ((639, -934, 481), (632, 365, 793), (729, 282, 865), (644, 362, 854), (816, 577, -529), (774, 592, -540), (535, -759, -780), (757, -874, 513), (477, -939, -738), (812, -911, 472), (510, -902, -720), (812, 521, -565)), ((951, 325, 691), (569, -948, 523), (578, -971, 696), (-468, 484, 523), (-683, -796, 800), (-623, -939, 825), (890, 328, 703), (962, 245, 606), (-641, -976, 858), (-443, 555, 561), (-432, 540, 519), (610, -911, 578))], [(2, 26), ((-492, -553, -506), (-484, -544, -643), (-398, 724, -824), (816, 577, -529), (774, 592, -540), (535, -759, -780), (-425, 753, -671), (477, -939, -738), (510, -902, -720), (812, 521, -565), (-232, 713, -732), (-379, -541, -658)), ((640, 541, -519), (563, 899, 475), (718, -524, 777), (503, 756, 500), (612, -756, -460), (754, -580, 781), (545, 936, 442), (777, 550, -527), (743, -595, 739), (551, -716, -267), (459, -727, -433), (625, 538, -414))], [(3, 8), ((-635, 745, 540), (566, 759, -325), (-659, 844, -601), (-719, 870, -804), (493, 363, 512), (595, 847, -490), (-736, 908, -709), (567, 435, 592), (-454, 699, 591), (479, 537, 587), (-634, 686, 675), (629, 652, -422)), ((771, 394, -747), (747, 493, 394), (831, 368, -950), (-454, 479, -471), (566, 539, 445), (-455, 803, 446), (-483, 391, -636), (746, 552, 529), (-517, 586, -568), (-381, 875, 366), (-367, 701, 441), (848, 330, -855))], [(3, 9), ((566, 759, -325), (572, -349, 408), (582, -465, 442), (493, 363, 512), (595, 847, -490), (567, 435, 592), (546, -418, -347), (374, -380, -374), (395, -357, -350), (646, -473, 376), (479, 537, 587), (629, 652, -422)), ((693, -421, -520), (-339, -373, -775), (-308, 409, -577), (476, 593, -582), (800, -324, -583), (-432, 377, -503), (578, 588, -670), (888, -489, -554), (-316, -349, -754), (-424, 443, -567), (404, 513, -656), (-377, -346, -603))], [(3, 11), ((572, -349, 408), (582, -465, 442), (-703, -528, -647), (-420, -458, 890), (546, -418, -347), (374, -380, -374), (395, -357, -350), (-598, -543, -644), (646, -473, 376), (-378, -645, 931), (-590, -680, -635), (-424, -556, 876)), ((-239, 701, 520), (487, 817, 269), (772, 494, -716), (-271, 825, 446), (484, 756, 420), (781, 631, -724), (511, 794, 248), (784, 646, -829), (-753, 716, -546), (-794, 529, -504), (-305, 709, 456), (-739, 618, -550))], [(3, 28), ((-635, 745, 540), (-659, 844, -601), (-719, 870, -804), (-703, -528, -647), (-420, -458, 890), (-736, 908, -709), (-454, 699, 591), (-598, -543, -644), (-634, 686, 675), (-378, -645, 931), (-590, -680, -635), (-424, -556, 876)), ((728, 490, -483), (669, 491, -618), (682, 671, -534), (-560, 527, 701), (-475, 705, -833), (-545, 422, 704), (-573, 701, -819), (891, 389, 766), (-662, 747, -874), (853, 406, 861), (827, 466, 658), (-697, 535, 692))], [(3, 29), ((566, 759, -325), (-659, 844, -601), (-719, 870, -804), (-703, -528, -647), (595, 847, -490), (-736, 908, -709), (546, -418, -347), (374, -380, -374), (395, -357, -350), (-598, -543, -644), (629, 652, -422), (-590, -680, -635)), ((-613, 742, -580), (582, 520, 647), (-720, 839, -517), (396, 814, -346), (-808, 674, -546), (719, 529, 639), (567, 517, 752), (-805, 563, 708), (457, 817, -497), (-869, 455, 785), (419, 790, -325), (-831, 360, 768))], [(4, 8), ((345, -518, 952), (516, -783, -443), (529, -603, -527), (-524, -764, -490), (-481, -700, -318), (371, -578, 749), (-499, -646, -469), (470, -602, -392), (-652, -400, 657), (307, -501, 857), (-628, -493, 766), (-610, -573, 646)), ((771, 394, -747), (949, -629, -655), (703, -476, 471), (747, 493, 394), (649, -458, 320), (831, 368, -950), (566, 539, 445), (746, 552, 529), (585, -501, 492), (776, -587, -644), (856, -605, -764), (848, 330, -855))], [(4, 28), ((495, 425, 520), (345, -518, 952), (516, -783, -443), (529, -603, -527), (736, 649, -293), (404, 473, 599), (562, 452, 642), (740, 452, -317), (371, -578, 749), (470, -602, -392), (716, 459, -232), (307, -501, 857)), ((728, 490, -483), (482, -571, -323), (636, -564, 551), (669, 491, -618), (682, 671, -534), (458, -564, -408), (891, 389, 766), (853, 406, 861), (827, 466, 658), (703, -537, 429), (462, -761, -384), (794, -585, 508))], [(5, 14), ((-825, 494, 824), (-931, 793, -772), (-853, 573, 778), (808, 537, -544), (346, 557, 536), (359, 554, 610), (356, 727, 617), (-845, 743, -654), (672, 552, -636), (781, 602, -630), (-866, 725, -638), (-619, 545, 813)), ((-856, -604, 462), (791, -481, 470), (544, -661, -981), (778, -633, -946), (-431, -479, -785), (-747, -654, 468), (770, -463, 486), (856, -413, 604), (-434, -652, -778), (-883, -669, 376), (-421, -649, -704), (750, -712, -992))], [(5, 23), ((-825, 494, 824), (-931, 793, -772), (-853, 573, 778), (-508, -652, -917), (-484, -560, 698), (-845, 743, -654), (-406, -636, 700), (-472, -751, 744), (-431, -623, -853), (-866, 725, -638), (-575, -640, -781), (-619, 545, 813)), ((553, -662, 788), (524, -739, 724), (541, -595, 652), (-892, -239, 643), (-644, -551, -942), (461, -686, -827), (-824, -304, 509), (-842, -325, 525), (-672, -317, -907), (537, -764, -829), (652, -698, -873), (-593, -345, -953))], [(6, 30), ((710, -369, 603), (793, -457, 728), (836, -346, 599), (604, -534, -763), (557, 716, -773), (661, -633, -880), (640, -504, -810), (490, 838, -800), (704, 559, 432), (713, 634, 431), (717, 446, 374), (399, 759, -752)), ((826, 646, -599), (521, -538, -399), (735, 694, -678), (564, 774, 793), (512, -537, -474), (508, -480, -286), (389, -705, 506), (515, -709, 529), (585, 704, 664), (621, 657, 694), (432, -834, 617), (668, 667, -556))], [(6, 34), ((710, -369, 603), (793, -457, 728), (836, -346, 599), (-403, -309, 573), (-703, 529, 671), (-637, 704, 693), (-418, -376, 672), (-775, 707, 665), (704, 559, 432), (-495, -270, 565), (713, 634, 431), (717, 446, 374)), ((645, -638, -336), (-475, -439, 419), (-490, -340, 486), (-847, -347, -597), (-567, -447, 380), (764, -413, 456), (-709, -319, -594), (641, -581, -524), (632, -580, -449), (-775, -341, -419), (638, -409, 479), (721, -284, 567))], [(6, 35), ((-403, -309, 573), (-703, 529, 671), (-637, 704, 693), (-659, -632, -665), (-616, -718, -516), (-418, -376, 672), (-583, 903, -748), (-614, 779, -749), (-775, 707, 665), (-559, -629, -567), (-550, 889, -697), (-495, -270, 565)), ((-588, 803, 467), (682, 656, -731), (-687, 788, 534), (-580, 711, 428), (734, 592, -621), (-708, 569, -546), (733, 623, -745), (650, 547, 790), (-686, 503, -371), (552, 647, 787), (501, 590, 876), (-680, 431, -549))], [(7, 13), ((592, 592, -803), (-469, 679, -574), (-370, -507, -427), (582, 571, -866), (570, -708, -548), (701, 583, -915), (444, -731, -552), (-417, 599, -463), (-388, -667, -372), (-417, -641, -418), (-419, 588, -550), (487, -620, -423)), ((-643, 587, 547), (-766, 538, -548), (-619, 637, 638), (-278, -533, 542), (-390, -424, 551), (-645, -402, -749), (-327, -414, 530), (-730, 585, 558), (-821, 556, -708), (-775, 585, -682), (-770, -319, -661), (-641, -276, -772))], [(7, 19), ((-370, -507, -427), (570, -708, -548), (444, -731, -552), (727, -770, 609), (-388, -667, -372), (-417, -641, -418), (636, -828, 534), (586, -804, 686), (-335, -599, 346), (487, -620, -423), (-289, -627, 444), (-380, -499, 497)), ((478, -381, -462), (-416, -490, 443), (-514, -462, 397), (353, -469, -379), (348, -448, 525), (482, -358, -336), (-679, -319, -619), (-604, -261, -528), (-756, -285, -478), (-567, -590, 488), (302, -422, 496), (357, -582, 478))], [(8, 12), ((771, 394, -747), (-714, -476, -621), (949, -629, -655), (831, 368, -950), (-454, 479, -471), (-483, 391, -636), (-766, -339, -696), (-517, 586, -568), (-781, -532, -657), (776, -587, -644), (856, -605, -764), (848, 330, -855)), ((627, -592, -292), (678, 945, 441), (903, 633, -377), (719, -770, 731), (753, 893, 578), (519, -669, -228), (730, -597, 689), (738, 662, -289), (424, -652, -266), (806, 696, -484), (717, 960, 634), (610, -677, 707))], [(8, 15), ((703, -476, 471), (747, 493, 394), (649, -458, 320), (-450, -606, 490), (-447, -560, 569), (566, 539, 445), (-455, 803, 446), (746, 552, 529), (585, -501, 492), (-500, -525, 573), (-381, 875, 366), (-367, 701, 441)), ((-486, -627, 542), (-367, -834, -858), (-441, -754, -786), (580, -755, -522), (760, -671, -535), (-433, -631, 577), (-353, -759, -684), (-436, -710, 623), (663, -880, 475), (599, -708, 518), (761, -806, -476), (717, -729, 493))], [(9, 21), ((-266, -746, 427), (403, 702, 597), (-316, 739, 829), (-443, -698, 419), (-437, -829, 413), (551, 690, 727), (590, -327, 823), (-264, 875, 744), (-366, 842, 876), (647, -301, 731), (537, -257, 794), (519, 650, 652)), ((-656, -410, 636), (823, 546, 875), (-848, 475, 412), (295, -538, 557), (-708, -294, 691), (692, 552, 869), (321, -481, 465), (-745, 425, 459), (251, -428, 494), (740, 375, 861), (-881, 373, 544), (-696, -442, 561))], [(12, 29), ((627, -592, -292), (-635, 776, -235), (-291, -482, -279), (903, 633, -377), (-277, -538, -463), (519, -669, -228), (-311, -513, -232), (-585, 746, -248), (-439, 755, -225), (738, 662, -289), (424, -652, -266), (806, 696, -484)), ((-613, 742, -580), (-865, -375, 629), (-818, -355, 598), (-862, -699, -660), (-720, 839, -517), (-849, -649, -630), (-808, 674, -546), (-634, -341, 654), (-805, 563, 708), (-872, -503, -639), (-869, 455, 785), (-831, 360, 768))], [(13, 30), ((-766, 538, -548), (526, 719, -619), (-645, -402, -749), (768, -472, -614), (838, -451, -485), (564, 744, -548), (721, -508, -584), (-821, 556, -708), (-775, 585, -682), (-770, -319, -661), (522, 755, -563), (-641, -276, -772)), ((-642, 458, 715), (-606, 462, 659), (564, 774, 793), (-443, -885, 570), (-472, -839, 596), (389, -705, 506), (515, -709, 529), (585, 704, 664), (621, 657, 694), (-425, -830, 730), (432, -834, 617), (-631, 500, 730))], [(13, 32), ((-643, 587, 547), (-766, 538, -548), (526, 719, -619), (-619, 637, 638), (864, 504, 851), (911, 529, 717), (564, 744, -548), (-730, 585, 558), (-821, 556, -708), (-775, 585, -682), (522, 755, -563), (864, 484, 841)), ((-603, 695, -545), (-737, 758, 756), (-685, -562, 600), (-567, 639, -541), (-793, -641, -930), (-578, 624, -583), (-818, -775, -883), (-737, -482, 711), (-838, -765, -883), (-735, -471, 624), (-784, 624, 747), (-766, 784, 802))], [(13, 36), ((587, -367, 552), (526, 719, -619), (473, -309, 656), (864, 504, 851), (911, 529, 717), (768, -472, -614), (442, -375, 612), (838, -451, -485), (564, 744, -548), (721, -508, -584), (522, 755, -563), (864, 484, 841)), ((-881, -406, -369), (544, -549, 623), (445, -432, 566), (508, -706, -629), (-652, -828, 490), (523, -748, -640), (-891, -406, -389), (-696, -797, 424), (-757, -359, -414), (574, -502, 587), (-592, -683, 482), (579, -744, -604))], [(14, 22), ((791, -481, 470), (544, -661, -981), (695, 391, -954), (778, -633, -946), (374, 571, 322), (770, -463, 486), (686, 564, -977), (313, 559, 319), (856, -413, 604), (302, 474, 239), (750, -712, -992), (654, 446, -917)), ((486, -940, -501), (951, 325, 691), (569, -948, 523), (578, -971, 696), (473, 476, -349), (514, -986, -580), (494, 492, -331), (408, 610, -281), (890, 328, 703), (962, 245, 606), (720, -975, -529), (610, -911, 578))], [(15, 18), ((-311, 523, 627), (919, 342, 493), (-486, -627, 542), (929, 366, 301), (-361, 510, 666), (-250, 485, 729), (-433, -631, 577), (811, 405, 438), (-436, -710, 623), (663, -880, 475), (599, -708, 518), (717, -729, 493)), ((458, -807, 807), (-535, -566, -608), (-618, -485, -558), (-788, -633, 541), (-637, -615, 595), (497, -670, 689), (577, -379, -372), (602, -442, -483), (-539, -531, -555), (615, -481, -433), (434, -615, 797), (-616, -590, 477))], [(16, 20), ((446, -933, -782), (463, 708, -638), (-722, -501, -688), (552, 657, -581), (-409, 560, -498), (-445, 613, -427), (-616, -583, -605), (-391, 575, -471), (549, 559, -681), (399, -947, -718), (-736, -705, -610), (510, -866, -712)), ((762, -728, -548), (-373, -970, -440), (417, 552, -687), (-437, 685, -520), (-523, 536, -477), (748, -524, -470), (-484, -889, -446), (435, 537, -660), (471, 590, -731), (-526, 634, -577), (642, -606, -553), (-420, -956, -376))], [(16, 36), ((647, 461, 582), (677, 414, 618), (-726, -639, 444), (-748, -578, 351), (-656, -681, 287), (-489, 595, 723), (-549, 740, 715), (872, -689, 331), (886, -633, 515), (852, -658, 284), (548, 344, 639), (-593, 709, 781)), ((544, -549, 623), (-829, 551, 761), (445, -432, 566), (769, 601, 874), (749, 570, 921), (-652, -828, 490), (-759, 593, 918), (-696, -797, 424), (574, -502, 587), (-592, -683, 482), (783, 545, 690), (-851, 490, 854))], [(17, 24), ((-468, 639, -514), (-729, -544, -571), (-847, -649, 472), (-601, 246, 623), (-745, -464, -431), (-796, -825, 430), (-806, -623, 368), (-528, 415, -522), (-549, 442, 612), (-497, 330, 605), (-466, 350, -520), (-713, -627, -480)), ((-493, -634, -769), (598, -336, -629), (576, -470, 323), (-297, -582, -780), (493, -454, 414), (-690, -715, 357), (413, -438, 274), (-466, -655, 365), (-401, -717, 363), (572, -377, -525), (774, -387, -587), (-381, -686, -762))], [(17, 37), ((762, -793, 419), (617, -804, 364), (306, 658, 456), (-847, -649, 472), (730, -673, 388), (315, 620, 403), (-601, 246, 623), (-796, -825, 430), (378, 642, 605), (-806, -623, 368), (-549, 442, 612), (-497, 330, 605)), ((-627, 717, -818), (-638, 772, -673), (-507, 748, -786), (412, 513, 545), (824, 680, -362), (786, 733, -371), (-483, 664, 791), (808, 531, -434), (-457, 768, 750), (608, 524, 493), (496, 531, 441), (-659, 706, 740))], [(19, 23), ((-648, 634, 647), (-416, -490, 443), (-514, -462, 397), (542, 529, 843), (636, 610, 808), (348, -448, 525), (-655, 568, 765), (535, 594, 673), (-541, 634, 724), (-567, -590, 488), (302, -422, 496), (357, -582, 478)), ((-395, 771, 454), (-683, 488, -604), (608, 531, -562), (-582, 623, -588), (-349, 800, 428), (-589, 453, -523), (520, 808, 596), (-404, 818, 588), (601, 649, -628), (494, 572, -628), (369, 853, 496), (467, 899, 468))], [(19, 30), ((478, -381, -462), (542, 529, 843), (353, -469, -379), (636, 610, 808), (348, -448, 525), (482, -358, -336), (707, 434, -455), (535, 594, 673), (302, -422, 496), (357, -582, 478), (649, 547, -468), (650, 622, -459)), ((521, -538, -399), (512, -537, -474), (-443, -885, 570), (508, -480, -286), (-472, -839, 596), (389, -705, 506), (-620, -652, -446), (-755, -551, -462), (515, -709, 529), (-790, -645, -381), (-425, -830, 730), (432, -834, 617))], [(19, 34), ((-467, 744, -737), (478, -381, -462), (-387, 709, -836), (-416, 673, -738), (353, -469, -379), (482, -358, -336), (-679, -319, -619), (707, 434, -455), (-604, -261, -528), (-756, -285, -478), (649, 547, -468), (650, 622, -459)), ((645, -638, -336), (572, 673, 359), (481, 748, 417), (363, 536, -646), (764, -413, 456), (362, 485, -575), (641, -581, -524), (632, -580, -449), (622, 825, 383), (264, 456, -611), (638, -409, 479), (721, -284, 567))], [(20, 27), ((-870, -547, 392), (-833, -607, 533), (-373, -970, -440), (-614, 593, 675), (-437, 685, -520), (-523, 536, -477), (-667, 655, 612), (-484, -889, -446), (-526, 634, -577), (-672, 680, 789), (-420, -956, -376), (-918, -674, 407)), ((410, 586, 469), (269, 526, 432), (552, -614, 688), (284, 653, 384), (-569, 868, 818), (489, -676, 635), (-643, -706, 865), (666, -701, 630), (-499, 935, 882), (-700, -655, 776), (-600, -557, 779), (-563, 949, 929))], [(22, 23), ((486, -940, -501), (-319, -637, -490), (-454, -621, -591), (-602, 421, -778), (473, 476, -349), (514, -986, -580), (494, 492, -331), (408, 610, -281), (-649, 555, -769), (-284, -556, -584), (720, -975, -529), (-631, 395, -824)), ((-395, 771, 454), (-892, -239, 643), (-683, 488, -604), (-644, -551, -942), (-582, 623, -588), (-349, 800, 428), (-589, 453, -523), (-824, -304, 509), (-842, -325, 525), (-404, 818, 588), (-672, -317, -907), (-593, -345, -953))], [(22, 30), ((-319, -637, -490), (-454, -621, -591), (-602, 421, -778), (-468, 484, 523), (-683, -796, 800), (-623, -939, 825), (-649, 555, -769), (-641, -976, 858), (-284, -556, -584), (-443, 555, 561), (-432, 540, 519), (-631, 395, -824)), ((-433, 797, -801), (-642, 458, 715), (-391, 739, -621), (-606, 462, 659), (-443, -885, 570), (-472, -839, 596), (-620, -652, -446), (-755, -551, -462), (-790, -645, -381), (-451, 764, -764), (-425, -830, 730), (-631, 500, 730))], [(22, 32), ((951, 325, 691), (-602, 421, -778), (-468, 484, 523), (473, 476, -349), (494, 492, -331), (408, 610, -281), (890, 328, 703), (-649, 555, -769), (962, 245, 606), (-443, 555, 561), (-432, 540, 519), (-631, 395, -824)), ((338, 703, 327), (-603, 695, -545), (-737, 758, 756), (-567, 639, -541), (273, 569, 259), (816, 854, -713), (755, 851, -725), (359, 687, 309), (-578, 624, -583), (827, 934, -628), (-784, 624, 747), (-766, 784, 802))], [(22, 33), ((486, -940, -501), (-319, -637, -490), (569, -948, 523), (-454, -621, -591), (578, -971, 696), (-683, -796, 800), (-623, -939, 825), (514, -986, -580), (-641, -976, 858), (-284, -556, -584), (720, -975, -529), (610, -911, 578)), ((-755, 538, -769), (546, 394, 400), (-813, 358, -727), (636, 713, -540), (-780, 395, -709), (625, 348, 428), (-478, 386, 483), (535, 697, -405), (-533, 423, 524), (574, 359, 634), (-651, 363, 492), (629, 778, -370))], [(23, 24), ((-683, 488, -604), (-644, -551, -942), (608, 531, -562), (-582, 623, -588), (461, -686, -827), (-589, 453, -523), (-672, -317, -907), (537, -764, -829), (652, -698, -873), (601, 649, -628), (494, 572, -628), (-593, -345, -953)), ((598, 651, 525), (-737, 452, 385), (-749, 406, 576), (437, 675, -759), (-602, 337, -720), (402, 756, -665), (-368, 372, -748), (572, 691, -658), (-396, 326, -669), (480, 717, 532), (521, 651, 418), (-815, 450, 461))], [(24, 33), ((-493, -634, -769), (598, -336, -629), (437, 675, -759), (-602, 337, -720), (-297, -582, -780), (402, 756, -665), (-368, 372, -748), (572, 691, -658), (-396, 326, -669), (572, -377, -525), (774, -387, -587), (-381, -686, -762)), ((665, -314, -566), (769, -355, -540), (546, 394, 400), (636, 713, -540), (707, -365, -742), (625, 348, 428), (535, 697, -405), (532, -664, 413), (514, -560, 329), (574, 359, 634), (629, 778, -370), (525, -612, 525))], [(25, 28), ((-455, -741, -363), (809, -390, -561), (450, -820, 446), (-767, -727, 468), (-431, -748, -448), (-435, -551, -424), (510, -845, 303), (-609, -748, 511), (-676, -775, 389), (492, -878, 266), (798, -517, -501), (915, -438, -595)), ((-782, -922, -521), (482, -571, -323), (636, -564, 551), (458, -564, -408), (-483, -467, 343), (-888, -874, -555), (-465, -434, 306), (-423, -492, 486), (703, -537, 429), (462, -761, -384), (-771, -795, -461), (794, -585, 508))], [(25, 30), ((450, -820, 446), (-767, -727, 468), (814, 470, 605), (510, -845, 303), (-609, -748, 511), (-676, -775, 389), (-453, 456, 593), (492, -878, 266), (-462, 457, 668), (679, 571, 621), (849, 564, 686), (-449, 399, 781)), ((826, 646, -599), (521, -538, -399), (-433, 797, -801), (735, 694, -678), (-391, 739, -621), (512, -537, -474), (508, -480, -286), (-620, -652, -446), (-755, -551, -462), (-790, -645, -381), (-451, 764, -764), (668, 667, -556))], [(25, 33), ((679, 704, -447), (809, -390, -561), (450, -820, 446), (653, 600, -406), (814, 470, 605), (510, -845, 303), (492, -878, 266), (798, -517, -501), (477, 642, -457), (679, 571, 621), (915, -438, -595), (849, 564, 686)), ((-325, -469, -410), (-755, 538, -769), (665, -314, -566), (769, -355, -540), (-813, 358, -727), (-373, -503, -304), (636, 713, -540), (707, -365, -742), (-780, 395, -709), (535, 697, -405), (629, 778, -370), (-452, -409, -421))], [(26, 28), ((640, 541, -519), (563, 899, 475), (-773, 381, -398), (503, 756, 500), (-811, 476, -381), (-556, 691, 572), (-747, 584, -458), (-714, 734, 593), (545, 936, 442), (777, 550, -527), (-623, 813, 545), (625, 538, -414)), ((636, -564, 551), (-560, 527, 701), (-483, -467, 343), (-545, 422, 704), (891, 389, 766), (853, 406, 861), (-465, -434, 306), (-423, -492, 486), (827, 466, 658), (703, -537, 429), (-697, 535, 692), (794, -585, 508))], [(26, 29), ((640, 541, -519), (-773, 381, -398), (-811, 476, -381), (-807, -354, -537), (-760, -334, -568), (612, -756, -460), (-747, 584, -458), (777, 550, -527), (551, -716, -267), (459, -727, -433), (625, 538, -414), (-576, -320, -512)), ((554, -777, 706), (-865, -375, 629), (493, -737, 899), (-818, -355, 598), (582, 520, 647), (719, 529, 639), (-634, -341, 654), (567, 517, 752), (-805, 563, 708), (-869, 455, 785), (401, -748, 733), (-831, 360, 768))], [(26, 30), ((563, 899, 475), (718, -524, 777), (503, 756, 500), (-452, -658, 465), (-556, 691, 572), (-714, 734, 593), (-509, -559, 582), (754, -580, 781), (545, 936, 442), (743, -595, 739), (-623, 813, 545), (-473, -529, 535)), ((826, 646, -599), (-433, 797, -801), (-642, 458, 715), (735, 694, -678), (-391, 739, -621), (-606, 462, 659), (564, 774, 793), (585, 704, 664), (621, 657, 694), (-451, 764, -764), (668, 667, -556), (-631, 500, 730))], [(26, 36), ((718, -524, 777), (-452, -658, 465), (-807, -354, -537), (-760, -334, -568), (612, -756, -460), (-509, -559, 582), (754, -580, 781), (743, -595, 739), (551, -716, -267), (459, -727, -433), (-473, -529, 535), (-576, -320, -512)), ((544, -549, 623), (445, -432, 566), (387, 300, -437), (508, -706, -629), (376, 466, -345), (769, 601, 874), (749, 570, 921), (523, -748, -640), (574, -502, 587), (347, 493, -498), (783, 545, 690), (579, -744, -604))], [(27, 35), ((-709, -525, -742), (425, -740, -623), (552, -614, 688), (629, -695, -647), (-645, -473, -632), (489, -676, 635), (-643, -706, 865), (666, -701, 630), (-700, -655, 776), (591, -757, -580), (-600, -557, 779), (-676, -474, -756)), ((682, 656, -731), (467, -478, -612), (593, -605, 699), (512, -682, -636), (734, 592, -621), (733, 623, -745), (531, -542, 646), (650, 547, 790), (552, 647, 787), (450, -644, -569), (501, 590, 876), (506, -719, 641))], [(28, 31), ((-782, -922, -521), (728, 490, -483), (482, -571, -323), (669, 491, -618), (682, 671, -534), (458, -564, -408), (-475, 705, -833), (-573, 701, -819), (-662, 747, -874), (-888, -874, -555), (462, -761, -384), (-771, -795, -461)), ((634, -732, -963), (600, -838, -915), (771, 512, -802), (621, 732, 630), (672, 778, 449), (322, -425, 664), (832, 532, -612), (747, 508, -605), (336, -523, 660), (281, -612, 706), (537, 719, 450), (694, -721, -836))], [(33, 37), ((-325, -469, -410), (665, -314, -566), (769, -355, -540), (-373, -503, -304), (-764, -852, 473), (707, -365, -742), (-760, -834, 313), (532, -664, 413), (-771, -766, 420), (514, -560, 329), (-452, -409, -421), (525, -612, 525)), ((-338, -453, 696), (503, -772, 339), (396, -761, 271), (556, -765, 253), (-327, -326, 636), (412, 513, 545), (-221, -374, 602), (-483, 664, 791), (-457, 768, 750), (608, 524, 493), (496, 531, 441), (-659, 706, 740))]]
overlaps = [(0, 9), (0, 10), (0, 29), (1, 2), (1, 11), (1, 28), (1, 33), (2, 22), (2, 26), (3, 8), (3, 9), (3, 11), (3, 28), (3, 29), (4, 8), (4, 28), (5, 14), (5, 23), (6, 30), (6, 34), (6, 35), (7, 13), (7, 19), (8, 12), (8, 15), (9, 21), (12, 29), (13, 30), (13, 32), (13, 36), (14, 22), (15, 18), (16, 20), (16, 36), (17, 24), (17, 37), (19, 23), (19, 30), (19, 34), (20, 27), (22, 23), (22, 30), (22, 32), (22, 33), (23, 24), (24, 33), (25, 28), (25, 30), (25, 33), (26, 28), (26, 29), (26, 30), (26, 36), (27, 35), (28, 31), (33, 37)]


def merge_points_into_left_coord_space(pair, lpoints, rpoints):
    #overlap[0] => (l,r)
    #overlap[1] => [lpoints that overlap]
    #overlap[2] => [rpoints that overlap]

    centroid_r = [e for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), rpoints)]
    centroid_l = [e for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), lpoints)]


    # Evil! Here's a set to merge with four points at equal distances from centroid so order matters.
    # **** [((994, (599, -708, 518)), (994, (-616, -590, 477))), ((1158, (-433, -631, 577)), (1158, (-637, -615, 595))), ((1158, (717, -729, 493)), (1158, (-539, -531, -555))), ((1172, (-486, -627, 542)), (1172, (-535, -566, -608))), ((1248, (919, 342, 493)), (1248, (434, -615, 797))), ((1253, (-311, 523, 627)), (1253, (615, -481, -433))), ((1256, (-250, 485, 729)), (1256, (577, -379, -372))), ((1258, (811, 405, 438)), (1258, (497, -670, 689))), ((1273, (663, -880, 475)), (1273, (-788, -633, 541))), ((1286, (-436, -710, 623)), (1286, (-618, -485, -558))), ((1329, (-361, 510, 666)), (1329, (602, -442, -483))), ((1474, (929, 366, 301)), (1474, (458, -807, 807)))]
    print("****",         list(zip(
            sorted([(manhattan12space(p, centroid_l), p) for p in lpoints]),
            sorted([(manhattan12space(p, centroid_r), p) for p in rpoints])
            )))
    merged = [(pair[0][1], pair[1][1]) for pair in
        zip(
            sorted([(manhattan12space(p, centroid_l), p) for p in lpoints]),
            sorted([(manhattan12space(p, centroid_r), p) for p in rpoints])
            )
        ]
    print(merged)
    mapper = []

    for xyz in [0,1,2]:
        dir = [None, None, None]
        prev = None
        p = set([0,1,2])
        # for _, debg in sorted(merged, key=cmp_to_key(lambda a,b: a[0][xyz] - b[0][xyz])):
        #     print(debg)
        for _, r in sorted(merged, key=cmp_to_key(lambda a,b: a[0][xyz] - b[0][xyz])):
            if prev == None:
                prev = list(r)
            elif dir[0] == None:
                dir = sign(r[0]-prev[0]), sign(r[1]-prev[1]), sign(r[2]-prev[2])
            else:
                if sign(r[0]-prev[0]) != 0 and sign(r[0]-prev[0]) != dir[0]:
                    if 0 in p :
                        #print("***", pair, sign(r[0]-prev[0]), dir[0], r, prev)
                        p.remove(0)
                if sign(r[1]-prev[1]) != 0 and sign(r[1]-prev[1]) != dir[1]:
                    if 1 in p : p.remove(1)
                if sign(r[2]-prev[2]) != 0 and sign(r[2]-prev[2]) != dir[2]:
                    if 2 in p : p.remove(2)
            prev = list(r)

        axis = p.pop()
        #print("scanner LEFT","xyz"[xyz],"increasing is RIGHT", "xyz"[axis], dir[axis])
        mapper.append((axis, dir[axis]))

    r_in_l = None
    for l_point,r_point in merged:
        p = []
        for ax in mapper:
            p.append(r_point[ax[0]] * ax[1])
        r_point_xf = tuple(p)
        r_in_l = (l_point[0]-r_point_xf[0], l_point[1]-r_point_xf[1], l_point[2]-r_point_xf[2])
        print(r_in_l)
        #break

    print(r_in_l)

    #(-537, -823, -458), (605, 423, 415)
    # t scanner at (68, -1246, -43)
    #t to z

    def r_to_l(t_point):
        p=[]
        for i, ax in enumerate(mapper):
            p.append(t_point[ax[0]] * ax[1] + r_in_l[i])
        return(tuple(p))
    #apply

    l_points = set(scanners[pair[0]])
    r_points = scanners[pair[1]]

    tmp = len(l_points) + len(r_points)
    for point in r_points:
        l_points.add(r_to_l(point))
    print(pair, tmp - len(l_points), "OVERLAPPING")
    return l_points


def part1():
    global scanners, sinter
    total = 0
    data = open("input.txt","r").read().split("\n\n")
    for scanner in data:
        lines = scanner.split("\n")
        s = set()
        for l in lines[1:]:
            s.add(tuple(ints(l)))
        scanners.append(s)
        total += len(s)

    # nums = range(len(scanners))
    # print(nums)
    # pairs = list(itertools.combinations(nums, 2))
    # print(pairs)
    
    # result = []
    # for i, pair in enumerate(pairs):
    #     # if pair not in [(15, 18)]:
    #     #     continue
    #     print(i, "of", len(pairs))
    #     lfp, lps = fingerprints(pair[0])
    #     rfp, rps = fingerprints(pair[1])
    #     isect = lfp.intersection(rfp)
    #     if len(isect) > 0:
    #     # for f in rfp:
    #     #     if f in lfp:
    #         for k, isect_fingerprint in enumerate(isect):
    #             found = [pair]
    #             print("Scanners", pair, "overlap ", k)
    #             for lp in lps:
    #                 if lp[0] == isect_fingerprint:
    #                     found.append(lp[1])
    #                     break
    #             for rp in rps:
    #                 if rp[0] == isect_fingerprint:
    #                     found.append(rp[1])
    #                     break
    #             result.append(found)

    # rpoints = result[0][2]
    # lpoints = result[0][1]
    # centroid_r = [e/12 for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), rpoints)]
    # centroid_l = [e/12 for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), lpoints)]

    # # Evil! Here's a set to merge with four points at equal distances from centroid so order matters.
    # # **** [((994, (599, -708, 518)), (994, (-616, -590, 477))), ((1158, (-433, -631, 577)), (1158, (-637, -615, 595))), ((1158, (717, -729, 493)), (1158, (-539, -531, -555))), ((1172, (-486, -627, 542)), (1172, (-535, -566, -608))), ((1248, (919, 342, 493)), (1248, (434, -615, 797))), ((1253, (-311, 523, 627)), (1253, (615, -481, -433))), ((1256, (-250, 485, 729)), (1256, (577, -379, -372))), ((1258, (811, 405, 438)), (1258, (497, -670, 689))), ((1273, (663, -880, 475)), (1273, (-788, -633, 541))), ((1286, (-436, -710, 623)), (1286, (-618, -485, -558))), ((1329, (-361, 510, 666)), (1329, (602, -442, -483))), ((1474, (929, 366, 301)), (1474, (458, -807, 807)))]
    # print("****",         list(zip(
    #         sorted([(manhattan3(p, centroid_l), p) for p in lpoints]),
    #         sorted([(manhattan3(p, centroid_r), p) for p in rpoints])
    #         )))

    # rpoints = result[-1][2]
    # lpoints = result[-1][1]
    # centroid_r = [e for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), rpoints)]
    # centroid_l = [e for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), lpoints)]

    # # Evil! Here's a set to merge with four points at equal distances from centroid so order matters.
    # # **** [((994, (599, -708, 518)), (994, (-616, -590, 477))), ((1158, (-433, -631, 577)), (1158, (-637, -615, 595))), ((1158, (717, -729, 493)), (1158, (-539, -531, -555))), ((1172, (-486, -627, 542)), (1172, (-535, -566, -608))), ((1248, (919, 342, 493)), (1248, (434, -615, 797))), ((1253, (-311, 523, 627)), (1253, (615, -481, -433))), ((1256, (-250, 485, 729)), (1256, (577, -379, -372))), ((1258, (811, 405, 438)), (1258, (497, -670, 689))), ((1273, (663, -880, 475)), (1273, (-788, -633, 541))), ((1286, (-436, -710, 623)), (1286, (-618, -485, -558))), ((1329, (-361, 510, 666)), (1329, (602, -442, -483))), ((1474, (929, 366, 301)), (1474, (458, -807, 807)))]
    # print("****",         list(zip(
    #         sorted([(manhattan12space(p, centroid_l), p) for p in lpoints]),
    #         sorted([(manhattan12space(p, centroid_r), p) for p in rpoints])
    #         )))

    # print(result)
    # sinter = result
    # exit(0)

    graph = defaultdict(lambda : [])
    for l,r in [x[0] for x in sinter]:
        graph[r].append((1,l))
        graph[l].append((1,r))

    paths = []
    for a in range(1, 38):
        paths.append(dijkstra(graph, a,0))
    paths = sorted(paths, reverse=True)
    print(paths)

    sintermap = {s[0]:(s[1],s[2]) for s in sinter}
    sintermap.update({(s[0][1],s[0][0]):(s[2],s[1]) for s in sinter})
    for path in paths:
        for l,r in zip(path[1][1:], path[1]):
            #l,r = p[1][0],p[1][1]
            merged = merge_points_into_left_coord_space((l,r), sintermap[(l,r)][0], sintermap[(l,r)][1])
            scanners[l] = merged

    print(len(scanners[0]))
        

part1()
exit(0)
# o = """-618,-824,-621
# -537,-823,-458
# -447,-329,318
# 404,-588,-901
# 544,-627,-890
# 528,-643,409
# -661,-816,-575
# 390,-675,-793
# 423,-701,434
# -345,-311,381
# 459,-707,401
# -485,-357,347"""
# p = """686,422,578
# 605,423,415
# 515,917,-361
# -336,658,858
# -476,619,847
# -460,603,-452
# 729,430,532
# -322,571,750
# -355,545,-477
# 413,935,-424
# -391,539,-444
# 553,889,-390"""
# oo = []
# pp = []
# for l in o.split("\n"):
#     t = tuple(ints(l))
#     oo.append(t)
# for l in p.split("\n"):
#     t = tuple(ints(l))
#     pp.append(t)

# centroid_o = [e/12 for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), oo)]
# centroid_p = [e/12 for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), pp)]

#print([int(x[1])-int(x[0]) for x in zip(sorted([manhattan3(p,centroid_o) for p in oo]), sorted([manhattan3(p,centroid_p) for p in pp]))])


t_po = [(-266, -746, 427), (693, -421, -520), (-339, -373, -775), (800, -324, -583), (-443, -698, 419), (-437, -829, 413), (590, -327, 823), (888, -489, -554), (-316, -349, -754), (-377, -346, -603), (647, -301, 731), (537, -257, 794)]
z_po = [(-884, -676, -820), (-862, -696, 357), (-719, -647, -908), (-462, 334, 246), (-510, 326, 423), (-379, 320, 417), (-907, 638, -667), (-835, -868, 319), (-859, -847, 296), (-787, -613, -713), (-881, 730, -610), (-951, 701, -557)]

total = 0
data = open("input.txt","r").read().split("\n\n")
for scanner in data:
    lines = scanner.split("\n")
    s = set()
    for l in lines[1:]:
        s.add(tuple(ints(l)))
    scanners.append(s)
    total += len(s)
sintermap = {s[0]:(s[1],s[2]) for s in sinter}
#sintermap.update({(s[0][1],s[0][0]):(s[2],s[1]) for s in sinter})
z_po, t_po = sintermap[(3,11)]
# o = """-618,-824,-621
# -537,-823,-458
# -447,-329,318
# 404,-588,-901
# 544,-627,-890
# 528,-643,409
# -661,-816,-575
# 390,-675,-793
# 423,-701,434
# -345,-311,381
# 459,-707,401
# -485,-357,347"""
# p = """686,422,578
# 605,423,415
# 515,917,-361
# -336,658,858
# -476,619,847
# -460,603,-452
# 729,430,532
# -322,571,750
# -355,545,-477
# 413,935,-424
# -391,539,-444
# 553,889,-390"""
# z_po = []
# t_po = []
# for l in o.split("\n"):
#     t = tuple(ints(l))
#     z_po.append(t)
# for l in p.split("\n"):
#     t = tuple(ints(l))
#     t_po.append(t)
centroid_t = [e/12 for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), t_po)]
centroid_z = [e/12 for e in reduce(lambda a,b: (a[0]+b[0],a[1]+b[1],a[2]+b[2]), z_po)]

merged = [(pair[1][1], pair[0][1]) for pair in zip(sorted([(manhattan3(p, centroid_t), p) for p in t_po]), sorted([(manhattan3(p, centroid_z), p) for p in z_po]))]
print(merged)
mapper = []

# z_po, t_po
dir = [None, None, None]
prev = None
p = set([0,1,2])
for _, r in sorted(merged, key=cmp_to_key(lambda a,b: a[0][0] - b[0][0])):
    if prev == None:
        prev = list(r)
    elif dir[0] == None:
        dir = sign(r[0]-prev[0]), sign(r[1]-prev[1]), sign(r[2]-prev[2])
    else:
        if sign(r[0]-prev[0]) != dir[0]:
            if 0 in p : p.remove(0)
        if sign(r[1]-prev[1]) != dir[1]:
            if 1 in p : p.remove(1)
        if sign(r[2]-prev[2]) != dir[2]:
            if 2 in p : p.remove(2)

axis = p.pop()
print("scanner zero x-increasing is", axis, dir[axis])
mapper.append((axis, dir[axis]))
# sorted by x, ascending
# which co-ord in t is monotonic?

dir = [None, None, None]
prev = None
p = set([0,1,2])
for _, r in sorted(merged, key=cmp_to_key(lambda a,b: a[0][1] - b[0][1])):
    if prev == None:
        prev = list(r)
    elif dir[0] == None:
        dir = sign(r[0]-prev[0]), sign(r[1]-prev[1]), sign(r[2]-prev[2])
    else:
        if sign(r[0]-prev[0]) != dir[0]:
            if 0 in p : p.remove(0)
        if sign(r[1]-prev[1]) != dir[1]:
            if 1 in p : p.remove(1)
        if sign(r[2]-prev[2]) != dir[2]:
            if 2 in p : p.remove(2)

axis = p.pop()
print("scanner zero y-increasing is", axis, dir[axis])
mapper.append((axis, dir[axis]))

dir = [None, None, None]
prev = None
p = set([0,1,2])
for _, d in sorted(merged, key=cmp_to_key(lambda a,b: a[0][2] - b[0][2])):
    print(d)
for _, r in sorted(merged, key=cmp_to_key(lambda a,b: a[0][2] - b[0][2])):
    if prev == None:
        prev = list(r)
    elif dir[0] == None:
        dir = sign(r[0]-prev[0]), sign(r[1]-prev[1]), sign(r[2]-prev[2])
    else:
        if sign(r[0]-prev[0]) != dir[0]:
            if 0 in p :
                print("REMOVING ZERO")
                p.remove(0)
        if sign(r[1]-prev[1]) != dir[1]:
            if 1 in p : p.remove(1)
        if sign(r[2]-prev[2]) != dir[2]:
            if 2 in p : p.remove(2)
    prev = list(r)
print(p)
axis = p.pop()
print("scanner zero z-increasing is", axis, dir[axis])
mapper.append((axis, dir[axis]))

t_in_z = None
for z_point,t_point in merged:
    p = []
    for ax in mapper:
        p.append(t_point[ax[0]] * ax[1])
    t_point_xf = tuple(p)
    t_in_z = (z_point[0]-t_point_xf[0], z_point[1]-t_point_xf[1], z_point[2]-t_point_xf[2])
    print(t_in_z)

print(t_in_z)

#(-537, -823, -458), (605, 423, 415)
# t scanner at (68, -1246, -43)
#t to z

def t_to_p(t_point):
    p=[]
    for i, ax in enumerate(mapper):
        p.append(t_point[ax[0]] * ax[1] + t_in_z[i])
    return(tuple(p))
#assert(t_to_p((605, 423, 415)) == (-537, -823, -458))
exit(0)
data = open("input.txt","r").read().split("\n\n")
scanners = []
for scanner in data:
    lines = scanner.split("\n")
    s = set()
    for l in lines[1:]:
        s.add(tuple(ints(l)))
    scanners.append(s)

c = 0
for point in scanners[9]:
    if t_to_p(point) in scanners[0]:
        c += 1

print(c, "total points from [9] also in [0]")

overlaps = [(0, 9), (0, 10), (0, 29), (1, 2), (1, 11), (1, 28), (1, 33), (2, 22), (2, 26), (3, 8), (3, 9), (3, 11), (3, 28), (3, 29), (4, 8), (4, 28), (5, 14), (5, 23), (6, 30), (6, 34), (6, 35), (7, 13), (7, 19), (8, 12), (8, 15), (9, 21), (12, 29), (13, 30), (13, 32), (13, 36), (14, 22), (15, 18), (16, 20), (16, 36), (17, 24), (17, 37), (19, 23), (19, 30), (19, 34), (20, 27), (22, 23), (22, 30), (22, 32), (22, 33), (23, 24), (24, 33), (25, 28), (25, 30), (25, 33), (26, 28), (26, 29), (26, 30), (26, 36), (27, 35), (28, 31), (33, 37)]