from utils import *

input = [i.strip() for i in open("input.txt","r").readlines()]

def rot90cw(tile):
    h = len(tile)
    w = len(tile[0])
    newtile = []
    for x in range(w):
      row = ""
      for y in range(h-1, -1, -1):
          row += tile[y][x]
      newtile.append(row)
    return newtile

def vflip(tile):
    return tile[-1::-1]

def permute_edges(tile):
    # Returns a list of tuples of 10 bit numbers (top,right,bottom,left)
    # flipped and unflipped for each rotation
    edges = []
    h = len(tile)
    w = len(tile[0])

    for _ in range(4):
        top = int(tile[0], 2)
        bottom = int(tile[h-1], 2)
        left = int("".join([t[0] for t in tile]), 2)
        right = int("".join([t[w-1] for t in tile]), 2)

        tflipped = bottom
        bflipped = top
        lflipped = int("".join(reversed([t[0] for t in tile])),2)
        rflipped = int("".join(reversed([t[w-1] for t in tile])), 2)

        # tfp = int("".join(reversed(tile[0])),2)
        # bfp = int("".join(reversed(tile[h-1])),2)
        # lfp = right
        # rfp = left

        edges.extend([(top, right, bottom, left, ",".join(tile)),
                      (tflipped, rflipped, bflipped, lflipped, ",".join(vflip(tile))),
                    #   (tfp, rfp, bfp, lfp)])
        ])
        tile = rot90cw(tile)
    return frozenset(edges)


def check(names, placement, w):
    if len(placement) == 1:
        return True
    left = None if len(placement) % w == 1 else placement[-2][1] 
    above = None if len(placement) <= w else placement[-(w+1)][2]
    if left:
        if not placement[-1][3] == left:
            return False
    if above:
        if not placement[-1][0] == above:
            return False
    return True

def count_sea_monsters(placed, w):
    merged = []
    rem = []
    for tile in placed:
        chop_top_bottom = tile[4].split(",")[1:-1]
        rem.append([chop[1:-1] for chop in chop_top_bottom])
    tile_width = len(rem[0][0])
    for y in range(w):
        row_tiles = rem[y*w:((y+1)*w)]
        for line_n in range(tile_width):
            row = ""
            for tile in row_tiles:
                row += tile[line_n]
            merged.append(row)
    c, roughness = find_sea_monsters(merged)
    if c > 0:
      print("\n".join(merged).replace("0",".").replace("1","#"))
    return c, roughness

# def find_sea_monsters(image):
#     prev = None
#     count = 0
#     sea_monster =["..................1..*",#(.*)$",
#                   "1....11....11....111.*",
#                   ".1..1..1..1..1..1..."]
#     for r in range(2,len(image)):#range(len(image)-1,1,-1):
#         match_at = re.finditer(sea_monster[2], image[r])
#         prev = -200
#         for match in match_at:
#             body = re.fullmatch(sea_monster[1], "".join(image[r-1][match.start():]))
#             head = re.fullmatch(sea_monster[0], "".join(image[r-2][match.start():]))
#             if (body != None and head != None):
#                 if (match.start() > prev + len(sea_monster[2])):
#                   print("found at",r, match.start())
#                   count += 1
#                 prev = match.start()
#     return count, sum([1 for ch in "".join(image) if ch == "1"]) - (count)*15

def find_sea_monsters(image):
    prev = None
    count = 0
    sea_monster =["..................1..",#(.*)$",
                  "1....11....11....111.",
                  ".1..1..1..1..1..1..."]
    for r in range(len(image)):
        for c in range(len(image[0])):
            m = 0
            for rs in range(len(sea_monster)):
                for cs in range(len(sea_monster[0])):
                    try:
                        if sea_monster[rs][cs] == ".":
                            continue
                        else:
                            if image[r+rs][c+cs] == "1":
                                m += 1
                    except IndexError:
                        break
            if m == 15:
                count += 1

    return count, sum([1 for ch in "".join(image) if ch == "1"]) - (count)*15

def dfs(names, placed, remaining, w):
    if len(remaining) == 0:
        monsters, roughness = count_sea_monsters(placed, w)
        if (monsters > 0):
            print("ROUGHNESS",monsters,roughness)
        print(names[0]*names[w-1]*names[w*w-1]*names[w*w-w])
    else:
        for tile in remaining:
            for rot in tile[1]:
                if check(names + [tile[0]], placed + [rot], w):
                    dfs(names + [tile[0]], placed + [rot], remaining - {tile}, w)

def solve(part=1):

    tiles = set()
    
    for tile in bundles(input):
        num = positive_ints(tile[0])[0]
        data = [l.replace(".", "0").replace("#", "1") for l in tile[1:]]
        edges = permute_edges(data)
        tiles.add((num, edges))

    w = int(math.sqrt(len(tiles)))

    dfs([], [], tiles, w)

sea ="""011110001111100100011100
111110010010101111001010
010100010111000101101100
101011011101011011011111
001101110111100101111011
000101001101100010010011
101101001010010011010100
011101100000100011101000
101111010100001101001010
110001001000010010001111
001011000111001011111001
000010110101111100001000
001101101110000010110010
100010001110011110000110
010110001011010101110001
101110100111100011001000
101110001011000101111110
011101110111111100111110
001101001001011111110111
101001101111111100100110
101111100101000110010000
100001100101111111110011
100010000010011000111011
100111000011010001101101""".split("\n")

# sea = """000000000000010100000010000000000000000100000000000000001001100000001000001010010101010000000000
# 010001000010100000000000000100000000010000010001100010000100000000000011000000000000000010001100
# 001101000100101111101100001110001010000100000001000000000100000000000000001000011000000000100000
# 000011000010010010010010010011000101000100000110110000010000000111100000000000000010000110100000
# 110001000000000000000000010000000000000000111111000000001000000000000100000000000010010000000010
# 001001000000000010010000000001001000001011011000011000011100110000001000000010000000000101000000
# 000100000000000000000011000010010000000100101100110110100000000011000000000000010000011000001000
# 010100000100000000001010000000101000000010010010000010100000000000010010010000001000100001100000
# 000000000101001011000000010000000010000110000011100100011100010010110000000000010010000000000001
# 001000000000100000000001100111000011000000010000000000000000000000001000101100010000011000001000
# 000100000000000011000011001011000011100000001000001000010000100000000100001001100000000000010001
# 010100000000000100100100100100110110010000000000101000011000111001111000011100100000011100000101
# 000001000000000101010001000100000000111001010100000000000101100101101110100000010001000000100010
# 000001001101000011000000100000000000001011010101000000000001000000000000100000000101001000001001
# 100100010101000001010010000100000000000000000000000010100001001000001000000001001100011001001001
# 010101000000000001000000001000001101100000000000100000011000100000000011000000010001000000001001
# 000001000000001000011100111000011100000000001001000110000000011011010010000000100010000010000010
# 000100000100000110110100100100101000000000010100000000010100101011000100000100000010001000000101
# 000111000000000100010000001001000010001000100000010000100000000011000000100010001000011000100000
# 000001000000100000010000100000000000000010000000001100110010100110000110000111101100100001010000
# 000000000000000000100000000000001000011001011000011100000011001011111001001000000000000100000000
# 000001000000100000000000100010100110111100100100100101101010000000010100001000010000000000100000
# 010000011000000000000000000000000000000000000000000000010001001000000010000000010000000000000010
# 000100100000001110000011011010000100110100001000010001000000000110000000010100100000000110000001
# 000001000011011011001011100000001100000001000010000010000010000010001000000100010011000000000001
# 000000100100100110100100000111000001010000000011000000010100000001001000010000000000010001100100
# 100000001000101100000000000000001000000001010000001000000100000001001000001000000010010100000111
# 010000100000100000010001000000011100011000011000011100000000000000000000000100010000000100000001
# 000000100001000000000011100000100110110101110111100010000000000010000000001000000101000000000110
# 000000100001000000000001000000000000100100000010000100001110000010000010000001001000110000001000
# 100110000000010000111000001000000100001000000100000000000000001000000000001000000000000100000000
# 000101001000000010000000001110000001010000000000000000000100000000110000000011101001101000001001
# 010000000010100100011010100000100000000000000000000000001100000001000001000001011110000000000100
# 010000100010001111010010000001110000001100101100101100001111000000100000010000011000000010001000
# 001000110000000000000000010010010001000110110011111010110000010000010001000001100001010000101010
# 100001010010111000110001111000001100000000110000000100100001000000000000000001000000010101000010
# 101100001001111001001001001000001000000000001001101101000000000000001100000000000001100100000000
# 100100000100000000100100000000000010000000111000110100111001100000000010000010000010000001000000
# 100100000011000001001000000000000000110010000001000010101001010000010000000000010000000000100010
# 000000001110010001000000010000000001000100100001100000000010100001000000000000100101001000110000
# 110000000110100010000000000100000010101001100100001000100100001000000000001100010000100000101000
# 001100010000000000000000000100000010000001001000010000000000010010000000000101010010000000000000
# 101000010001000101010101001011000011100111100000000011000001000100000100000100000010000000000010
# 000000000000001100110000100100100100110110010100001111001100011111010000000000011010000010000010
# 000010000000000100000001000000001000010000010010010010010010110000000100111000100001100100000000
# 000000010000101010000000000101111100000011000001000010000001000000101000000000000000000011100100
# 001010001010000000000001100011000010000100001000010110001000010000000100000011000110001000000000
# 010001000011001111000011100000010010000100000000000000000001100001000000000001000000000000000001
# 100010101100100100100101000000100000010000000000000000000011100000010010010000000000010000000100
# 010001101000001000000000001001000001000001100101110101101001110010000000000000100001000001000000
# 011000000000011001100000000001011000000000110010010010010111001000000000000000011000000001011000
# 100010000010000001101000001100000000000000000000010001101100101000000000001001100000000100001000
# 001010000010000000000010000010000100000101000001000001101000000001000000010100000000000000000001
# 000110000000000000010000101000000001000100001001000001001111001010000100010010000000100011100010
# 010100000010001111011100010000000000100000101001011110011000011100000000000100000111000000011110
# 110110111000100010100001001001000100000100010110100110100100100000001000000001000010000000001010
# 000000001000011000011010111100000010000001000000000110000001000001000001000000000010001000000010
# 011001101101110101101101100000100110000000010101001010110000000000001000010000010100000100001000
# 001011000001100000100010000000010100000101110100000100010000100000001000110100001000000010001000
# 010000000110010000000000010000000000000000010010100000110011101001100101110011000100100000100011
# 000000000100001000001001010000111000110000111011000110010010010010011010101000000000000000000001
# 000010000000000000100010011011001001001001000000010000000011000100110101000100110001100000100000
# 000000010101100100000100001000000100010001010000100001010000010010100000000000000000100000000000
# 001000010100000100000001110100000000000000001011010000001101110000110100010001000000000000000001
# 101000000000001000010000011000000100000100100101000000000000100001001000000000011000000000100000
# 000100001001011010111100011100010011000100100001100011101011110100010111001000000010000001000000
# 100000010101100100100110100000000110000000011010010010010011110100100100000011000100000000110000
# 000000000000000001000010000000000100100000010100000011100000000000011000001010000100001010000010
# 011000001000000110001100000000010010010101000000000110000000001000000000000110010000001000100000
# 001000000010000000000001010001000100100000100100010010000100001000001000011100111001011100000010
# 000001000001010100110011010011000000010011010001100110000000010001000100100100100100100000000000
# 000000100001000000001100001000000001010010010000110001110000111000000001001001000000000001000001
# 010000010000000100011110000000001000010000001001011001001001000101000000000010000110000000000001
# 001000100000110000010101010000001000000000000000000001100000011010010000001000000000001010000000
# 001001001000001001110000000100000110000000000000000100000010110101100001001000001101011111100000
# 010000111000110010111100000000100100010000000010001100010000101001100001000000000000100000000000
# 001001011111011001000010000100000000000000011010000011100000001000000000110000000110111001000001
# 000001000100000000100000110010110001110100111001010000100001101001100001111011100000000000000010
# 000110000000001000000110001001101001011001000010000000011010010110011010000100000000100000010000
# 000000000010000000001100100000011101001011000000110000100010000010000010000010000000100000000000
# 100011000100011000100000000000000001000110000000001011000000000000001000000000000000000001000000
# 000000101001000000100000000000001000000010000100000000010011101000000100000010100000000000000000
# 101000000111000000100100100101010000000100110001100001100111110000000101001100100010000000000010
# 000000011100010001110000110000111001000100111110010010010010001100000100010010000011001100010100
# 000000001000001101001001001001011010100000010000101001010000011111000100000000010000000011001000
# 000000000000010010000000000010110001000010010100110000100010000000100000010100010000011000000100
# 001000000000000001110001010010001000010010001000010111000100000000000100000000000010001010000010
# 010001000010000000110100000100010100000000000100110011000010100001010000010110000100001101011000
# 000101001100001111001110100000000011000000011010010000100100100010000000011100111000011000011100
# 100011010010010011010000011000011111011000111100000000000000000000000000000110110100101110100000
# 000000000000100000000011000100101100100100101001000000000001000000000000000000000000010000010000
# 000101000010100000101000001000000000100100010000000000010100000000000100010000000010100000000001
# 011000000100000000100000000101000000000011101000000000000000110010010010010000010010000000100000
# 000100000010000000011100100000010100001100000101001010100000000100001000101100000000000010100000
# 001000000010001000001100000011010000001000000100000100000010000000000000000100000010110100101100
# 000010000000001000000001000110010010100000100010000100000100010001010000101000000000001000001000""".split("\n")
# print(find_sea_monsters(sea))
solve(1)
